// src/components/ChatList.jsx
import React from 'react';
import { ListGroup, Form, InputGroup, Button, Badge } from 'react-bootstrap';
import { PersonCircle, Dot, PlusCircle } from 'react-bootstrap-icons';

function ChatList({
  chats,
  activeChatId,
  onSelectChat,
  onAssumeChat,
  currentUser,
  filterStatus,
  onFilterChange,
  onNewChat, // Nova prop
  onReopenChat
}) {

  const getStatusBadge = (chat) => {
    if (chat.inFlow) {
      return <Badge bg="info" pill>Bot</Badge>;
    }
    if (chat.status === 'open' && !chat.assigned_to) {
      return <Badge bg="warning" pill>Aguardando</Badge>;
    }
    if (chat.status === 'closed') {
      return <Badge bg="secondary" pill>Fechado</Badge>;
    }
    if (chat.assigned_to) {
      return <Badge bg="success" pill>Em Atendimento</Badge>;
    }
    return null;
  };

  return (
    <div className="d-flex flex-column h-100">
      <div className="p-3 border-bottom">
        <h5 className="mb-3">Atendimentos</h5>
        <InputGroup className="mb-2">
          <Form.Select value={filterStatus} onChange={(e) => onFilterChange(e.target.value)}>
            <option value="open">Abertos</option>
            <option value="closed">Fechados</option>
          </Form.Select>
          <Button variant="outline-primary" onClick={onNewChat} title="Iniciar novo chat">
            <PlusCircle />
          </Button>
        </InputGroup>
      </div>
      <ListGroup variant="flush" className="flex-grow-1" style={{ overflowY: 'auto' }}>
        {chats.map(chat => (
          <ListGroup.Item
            key={chat.id}
            active={chat.id === activeChatId}
            className="d-flex justify-content-between align-items-start"
            style={{ cursor: 'pointer' }}
          >
            <div className="d-flex flex-grow-1" onClick={() => onSelectChat(chat)}>
              <PersonCircle size={40} className="me-3 text-secondary" />
              <div className="flex-grow-1 me-2">
                {/* CORREÇÃO: Usa o nome do chat se existir, senão mostra o número sem o sufixo @c.us */}
                <div className="fw-bold">{chat.name || chat.whatsapp_number.split('@')[0]}</div>
                <small className="text-muted d-block text-truncate" style={{ maxWidth: '180px' }}>
                  {chat.messages?.[0]?.body || 'Nenhuma mensagem ainda...'}
                </small>
                <div className="mt-1">
                  {getStatusBadge(chat)}
                </div>
              </div>
            </div>
            
            {(chat.status === 'open' || chat.inFlow) && !chat.assigned_to && (
              <Button size="sm" variant="success" onClick={(e) => { e.stopPropagation(); onAssumeChat(chat.id); }}>
                Assumir
              </Button>
            )}
            {chat.status === 'closed' && (
              <Button size="sm" variant="info" onClick={(e) => { e.stopPropagation(); onReopenChat(chat.id); }}>
                Reabrir
              </Button>
            )}
            {chat.assigned_to && (
              <div className="text-end">
                <small className="text-muted d-block">
                  {chat.assignee?.id === currentUser.id ? 'Você' : chat.assignee?.name.split(' ')[0]}
                </small>
              </div>
            )}
          </ListGroup.Item>
        ))}
        {chats.length === 0 && (
          <ListGroup.Item className="text-center text-muted">
            Nenhum chat encontrado.
          </ListGroup.Item>
        )}
      </ListGroup>
    </div>
  );
}

export default ChatList;